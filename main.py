import module


# Создайте функцию, которая запрашивает числовые данные от пользователя до тех пор, пока он не введёт целое или
# вещественное число.
# Обрабатывайте не числовые данные как исключения.
def task1():
    module.task1.main()


# Создайте функцию аналог get для словаря.
# Помимо самого словаря функция принимает ключ и значение по умолчанию.
# При обращении к несуществующему ключу функция должна возвращать дефолтное значение.
# Реализуйте работу через обработку исключений.
def task2():
    module.task2.main()


def task3():
    try:
        raise module.task3.AccessError
    except module.task3.AccessError as e:
        print(e)

    try:
        raise module.task3.LevelException
    except module.task3.LevelException as e:
        print(e)


# Вспоминаем задачу из семинара 8 про сериализацию данных,
# где в бесконечном цикле запрашивали имя, личный идентификатор и уровень доступа (от 1 до 7)
# сохраняя информацию в JSON файл.
# Напишите класс пользователя, который хранит эти данные в свойствах экземпляра.
# Отдельно напишите функцию, которая считывает информацию из JSON файла и формирует множество пользователей.
def task4():
    module.task4.main()


# Доработаем задачи 3 и 4. Создайте класс проекта, который имеет следующие методы:
# ●	загрузка данных (функция из задания 4)
# ●	вход в систему - требует указать имя и id пользователя.
# Для проверки наличия пользователя в множестве используйте магический метод проверки на равенство пользователей.
# Если такого пользователя нет, вызывайте исключение доступа.
# А если пользователь есть, получите его уровень из множества пользователей.
# ●	добавление пользователя. Если уровень пользователя меньше, чем ваш уровень, вызывайте исключение уровня доступа.
def task5():
    module.task5.main()


def main():
    # task1()
    # task2()
    # task3()
    # task4()
    task5()


if __name__ == '__main__':
    main()
